---
import hexRgb from "hex-rgb";
export interface Props {
  title: string;
  description: string;
  accentOne: string;
  textColor: string;
}
const { title, description, accentOne, textColor } = Astro.props;

const accentOneHexToRgb = hexRgb(accentOne);
const accentOneRgb = `${accentOneHexToRgb.red}, ${accentOneHexToRgb.green}, ${accentOneHexToRgb.blue}`;

const textColorToRgb = hexRgb(textColor);
const textColorRgb = `${textColorToRgb.red}, ${textColorToRgb.green}, ${textColorToRgb.blue}`;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
  </head>
  <body>
    <slot />
  </body>
</html>

<style is:global define:vars={{ accentOne, accentOneRgb, textColorRgb }}>
  :root {
    --textColor: rgba(var(--textColorRgb), 1);
    --linkColor: rgba(var(--textColorRgb), 1);
    --linkColorHover: rgba(var(--textColorRgb), 0.6);
    --bgColor: var(--accentOne);
    --borderColor: rgba(0, 0, 0, 0.2);
    --bgGradient: radial-gradient(
        at 79% 56%,
        hsla(347, 0%, 100%, 0.14) 0px,
        transparent 50%
      ),
      radial-gradient(at 57% 10%, hsla(200, 0%, 0%, 0.21) 0px, transparent 50%),
      radial-gradient(at 5% 95%, hsla(0, 0%, 0%, 0.73) 0px, transparent 50%),
      radial-gradient(at 98% 51%, hsla(0, 0%, 100%, 0.02) 0px, transparent 50%),
      linear-gradient(0deg, hsla(0, 0%, 0%, 0.2) 0%, hsla(0, 0%, 0%, 0.2) 100%);

    --growAnimation: grow 0.5s ease-in-out;
    --fadeInAnimation: fadeIn 1s ease-in-out;
  }

  * {
    box-sizing: border-box;
  }

  @keyframes grow {
    0% {
      transform: scale(0.5) translateY(90%);
      opacity: 0;
    }
    100% {
      transform: scale(1) translate(0);
      opacity: 1;
    }
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  html {
    font-family: system-ui, sans-serif;
    color: var(--textColor);
    height: 100%;
    margin: 0;
    display: flex;
    flex-direction: column;
    background-color: var(--bgColor);
    background-image: var(--bgGradient);
    background-size: cover;
    background-attachment: fixed;
    background-size: cover 100%;
    background-repeat: no-repeat;
  }
  body {
    --bgGradiantTopColor: rgba(var(--accentOneRgb), 1);
    --bgGradiantBottomColor: rgba(var(--accentOneRgb), 0);
    background-image: linear-gradient(
      to bottom,
      var(--bgGradiantTopColor) 0%,
      var(--bgGradiantBottomColor) 20vh,
      var(--bgGradiantBottomColor) 80vh,
      var(--bgGradiantTopColor) 100%
    );
    margin: 0;
  }

  main {
    margin: 0 auto;
    padding: 1.5rem 1.5rem 3rem;
    max-width: 72ch;
  }
  code {
    font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
      DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
  }

  .visually-hidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: auto;
    margin: 0;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    white-space: nowrap;
  }

  a {
    color: var(--linkColor);
    text-decoration: none;
    transition: 0.3s ease-in-out all;
  }
  a:focus,
  a:hover {
    color: var(--linkHoverColor);
  }
</style>
